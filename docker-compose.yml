version: '0.1'
services:

  # NoSQL: CassandraDB
  cassandra2:
    container_name: "cassandra-b"
    image: cassandra:latest
    restart: always
    ports:
      - "9042:9042"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'describe cluster'" ]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store_2:/var/lib/cassandra/data
  # NoSQL: CassandraDB
  cassandra:
    container_name: "cassandra-a"
    image: cassandra:latest
    restart: always
    ports:
      - "9043:9042"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'describe cluster'" ]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
  rest-service:
    container_name: rest_service
    build: ./
    restart: always
    ports:
      - "9090:9090"
  profile-service:
    container_name: profile-service
    build: ../profile-service
    restart: always
    ports:
      - "9091:9091"
    environment:
      - PORT=8080
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port
      - MONGO_DB_URI=mongodb://root:pass@mongo-profile:27017
      # - MONGO_DB_URI=mongodb://mongo:27017
      # NoSQL: Our service will try to connect to Mongo before it is up
      # in order to avoid that problem, we specify that it depends on mongo service
      # which defines the order of starting the containers
      # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      mongo-profile:
          condition: service_healthy
  mongo-profile:
    container_name: mongo-profile
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoProfile
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_profiles:/data/db

  accommodation-service:
    container_name: accommodation-service
    build: ../accommodation-service
    restart: always
    ports:
      - "9093:9093"
    environment:
      - PORT=8080
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port

      - CASS_DB=cassandra-a:9042
      # - MONGO_DB_URI=mongodb://mongo:27018
      # NoSQL: Our service will try to connect to Mongo before it is up
      # in order to avoid that problem, we specify that it depends on mongo service
      # which defines the order of starting the containers
      # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      cassandra:
        condition: service_healthy
  reservation-service:
    container_name: reservation-service
    build: ../reservation-service
    restart: always
    ports:
      - "9096:9096"
    environment:
      - PORT=8081
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port

      - CASS_DB=cassandra-b:9042
      # - MONGO_DB_URI=mongodb://mongo:27018
      # NoSQL: Our service will try to connect to Mongo before it is up
      # in order to avoid that problem, we specify that it depends on mongo service
      # which defines the order of starting the containers
      # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      cassandra2:
        condition: service_healthy
  auth-service:
    container_name: auth-service
    build: ../Auth-Service
    restart: always
    ports:
      - "9094:9094"
    environment:
      - PORT=8080
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port
      - MONGO_DB_URI=mongodb://root:pass@mongo-auth:27017
      # - MONGO_DB_URI=mongodb://mongo:27018
      # NoSQL: Our service will try to connect to Mongo before it is up
      # in order to avoid that problem, we specify that it depends on mongo service
      # which defines the order of starting the containers
      # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      mongo-auth:
          condition: service_healthy
  mongo-auth:
    container_name: mongo-auth
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoAuth
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_auths:/data/db
  avaibility-service:
    container_name: avaibility-service
    build: ../Aviability-Service
    restart: always
    ports:
      - "9095:9095"
    environment:
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port
      - MONGO_DB_URI=mongodb://root:pass@avaibility-mongo:27017
      # - MONGO_DB_URI=mongodb://mongo:27018
      # NoSQL: Our service will try to connect to Mongo before it is up
      # in order to avoid that problem, we specify that it depends on mongo service
      # which defines the order of starting the containers
      # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      avaibility-mongo:
        condition: service_healthy
  avaibility-mongo:
    container_name: avaibility-mongo
    image: mongo
    restart: always
    ports:
      - "27015:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoAviability
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_ava:/data/db
volumes:
  mongo_profiles:
  mongo_auths:
  mongo_ava:
  cass_store:
  cass_store_2: